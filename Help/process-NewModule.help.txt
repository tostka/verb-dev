
NAME
    update-NewModule
    
SYNOPSIS
    update-NewModule - Hybrid Monolithic/Dynam vers post-module conversion or component update: sign, publish to repo, and install back script
    
    
SYNTAX
    update-NewModule [-ModuleName] <String> -ModDirPath <FileInfo> [-Repository] <String> [-Merge] [-Republish] [-RunTest] [-NoBuildInfo] [-RequiredVersion <Version>] [-rgxModExtIncl 
    <String[]>] [-showDebug] [-whatIf] [<CommonParameters>]
    
    
DESCRIPTION
    update-NewModule - dyanmic include/dot-stourced post-module conversion or component update: sign - all files (this vers), publish to repo, and install back script
    Note: -Merge drivese logic to build Monolithic .psm1 (-Merge), vs Dynamic-include .psm1 (-not -Merge)
    
    v1.5.33+, it now properly supports psd1 manifest FileList and 
    (Docs|Licenses|Resource) dir build-in components through that setting 
    (place  relevent 3rd party non-executing files/data sources, you don't want to put into 
    a data psd1 hash, into these dirs, and they'll be autoadded as psd1.FileList 
    array members, and will be autocopied to the output modname\modname\dir on build).
    
    I've hit an insurmoutable bug in psv2, when using psGet to install psv3+ modules into older legacy machines. Verb-IO *won't* properly parse and load my ConvertFrom-SourceTable 
    function at all. So we need the ability to conditionally load module functions, skipping psv2-incompatibles when running that rev
    
    Preqeq Installs:
    Install-Module BuildHelpers -scope currentuser # buildhelpers metadata handling https://github.com/RamblingCookieMonster/BuildHelpers
    
    See example with code to remove all but latest rev of a given module
    
    This is intended to work against the following module dev/git folder struction: (git repo for the c:\sc\ModName root)
        C:\sc\MODNAME\
        |-- CHANGELOG.md
        |-- Classes
        |-- Docs
        |   |-- Cab
        |   |-- Markdown
        |   |-- Quick-Start-Installation-and-Example.md
        |   `-- en-US
        |-- Internal
        |-- Libs
        |-- Licenses
        |   |-- LICENSE.txt [License terms]
        |-- Package
        |   |-- module.1.2.3.nupkg [buffered back copies of published .nupkg files for recording at git]
        |-- Psd1filelist
        |-- Public
        |   |-- function.ps1 [one for each leaf module function to be exported, stored as separate .ps1 files, which are merged into a monolithic .psm1 using the -Merge param]
        |-- README.md
        |-- Resource
        |   |-- resource.ext [non-executable resource/data files that you want published with the module, but you don't want to bother with storing in a hash in a psd1 datafile; these 
    are auto-added to the psd1.FileList array, and are moved, flattened dir, into the modulename\modulename output build dir]
        |-- Tests
        |   |-- PPoShScriptingStyle.psd1 [Pester testing preferences]
        |   |-- ToddomationScriptingStyle-medium.psd1 [Pester testing preferences]
        |   `-- MODNAME.tests.ps1 [pester tests]
        |-- MODNAME
        |   |-- CHANGELOG.md
        |   |-- LICENSE.txt
        |   |-- Quick-Start-Installation-and-Example.md
        |   |-- README.md
        |   |-- logs
        |   |   |-- MODNAME-verb-Desktop-LOG-BATCH-EXEC-20220908-1541PM-log.txt [temp logs storage, ignored for module builds]
        |   |-- MODNAME.psd1
        |   `-- MODNAME.psm1
        |-- convertto-Module-LOG-BATCH-EXEC-20200114-1155AM-log.txt
        |-- fingerprint [semversion comparision tracking file]
        |-- rebuild-module.ps1 [module rebuild script]
        `-- requirements.psd1 [psdep module specification file]
    
    Where builds fail, you may want to leverage my uwps\.\reset-ModuleBuildFail.ps1 -Name verb-io script:
    
    ... to reset a given failed dir & profile back to rebuildable state (locates and reinstalls the most recent publsiehd module vers from the pslocalRepo, clears modname\modname dir, 
    reports on last vpublsiehd vers#, and echo's the current psm1 & psd1 version specs (for hand editing to reroll build).
    (leaving it out of verb-dev, as I want it to recover and function even when verb-dev is borked).
    

PARAMETERS
    -ModuleName <String>
        ModuleName[-ModuleName verb-AAD]
        
        Required?                    true
        Position?                    1
        Default value                
        Accept pipeline input?       true (ByValue)
        Accept wildcard characters?  false
        
    -ModDirPath <FileInfo>
        ModDirPath[-ModDirPath C:\sc\verb-ADMS]
        
        Required?                    true
        Position?                    named
        Default value                
        Accept pipeline input?       false
        Accept wildcard characters?  false
        
    -Repository <String>
        Target local Repo[-Repository someRepoName]
        
        Required?                    true
        Position?                    1
        Default value                
        Accept pipeline input?       true (ByValue, ByPropertyName)
        Accept wildcard characters?  false
        
    -Merge [<SwitchParameter>]
        Flag that indicates Module should be Merged into a monoolithic .psm1 (otherwise, a Dynamic-Include version is built)[-Merge]
        
        Required?                    false
        Position?                    named
        Default value                False
        Accept pipeline input?       false
        Accept wildcard characters?  false
        
    -Republish [<SwitchParameter>]
        Flag that indicates Module should be republished into local Repo (skips ConvertTo-ModuleDynamicTDO & set-AuthenticodeSignatureTDO steps) [-Republish]
        
        Required?                    false
        Position?                    named
        Default value                False
        Accept pipeline input?       false
        Accept wildcard characters?  false
        
    -RunTest [<SwitchParameter>]
        Flag that indicates Pester test script should be run, at end of processing [-RunTest]
        
        Required?                    false
        Position?                    named
        Default value                False
        Accept pipeline input?       false
        Accept wildcard characters?  false
        
    -NoBuildInfo [<SwitchParameter>]
        Skip BuildInfo use (workaround for hangs in that module)[-NoBuildInfo]
        
        Required?                    false
        Position?                    named
        Default value                False
        Accept pipeline input?       false
        Accept wildcard characters?  false
        
    -RequiredVersion <Version>
        Optional Explicit RequiredVersion specification (as contrasts with using current Manifest .psd1 ModuleVersion value)
        
        Required?                    false
        Position?                    named
        Default value                
        Accept pipeline input?       false
        Accept wildcard characters?  false
        
    -rgxModExtIncl <String[]>
        
        Required?                    false
        Position?                    named
        Default value                \.(cab|cat|cmd|config|cscfg|csdef|css|dll|dylib|gif|html|ico|jpg|js|json|map|Materialize|MaterialUI|md|pdb|php|png|ps1|ps1xml|psd1|psm1|rcs|reg|snip
        pet|so|txt|vscode|wixproj|wxi|xaml|xml|yml|zip)$
        Accept pipeline input?       false
        Accept wildcard characters?  false
        
    -showDebug [<SwitchParameter>]
        Parameter to display Debugging messages [-ShowDebug switch]
        
        Required?                    false
        Position?                    named
        Default value                False
        Accept pipeline input?       false
        Accept wildcard characters?  false
        
    -whatIf [<SwitchParameter>]
        Parameter to run a Test no-change pass [-Whatif switch]
        
        Required?                    false
        Position?                    named
        Default value                False
        Accept pipeline input?       false
        Accept wildcard characters?  false
        
    <CommonParameters>
        This cmdlet supports the common parameters: Verbose, Debug,
        ErrorAction, ErrorVariable, WarningAction, WarningVariable,
        OutBuffer, PipelineVariable, and OutVariable. For more information, see 
        about_CommonParameters (https:/go.microsoft.com/fwlink/?LinkID=113216). 
    
INPUTS
    
OUTPUTS
    
NOTES
    
    
        Version     : 1.1.0
        Author      : Todd Kadrie
        Website     :	http://www.toddomation.com
        Twitter     :	@tostka / http://twittegbpgcm gbp
        r.com/tostka
        CreatedDate : 2020-02-24
        FileName    : update-NewModule.ps1
        License     : MIT License
        Copyright   : (c) 2021 Todd Kadrie
        Github      : https://github.com/tostka/verb-dev
        Tags        : Powershell,Module,Build,Development
        REVISIONS
        * 3:30 PM 9/17/2024 added ps7 test & warning;  retooled trailing process (new WinTerm install eating into ps7 by default -> confusion)  added gmo -name `$tmod | ? version -ne 
        `$tVer | rmo -Force -Verbose  to update procedure output (ensure old in-mem obso copies are out of memory)
        * 2:59 PM 8/29/2024 recoded post install report output, found on LYN-9C5CTV3 an 
            obsolete copy of verb-io 11.x that didn't show from uninstall-module, but did 
            for gcm xxx ; added code to force delete the whole \Modules\[verb-xxx] tree 
            recursive before installing repo copy. Also added dyn repo discovery (from 
            $pslocalRepo in profile) and autosteering on scope. It's same SB on both 
            scopes, w differnt scop input. 
        * 5:10 PM 8/28/2024 still throwing oddball param errs calling set-AuthenticodeSignatureTDO (says showedebug doesn't exist, though I added it and have iflv'd the update); rem 
        the splat showdebug.
        * 5:00 PM 8/26/2024 also rplc sign-file -> set-AuthenticodeSignatureTDO, that should keep it from pulling obsolete sign-file out of the built mod, mid pass ; swapped out all 
        existing catch blocks with the -force block, to try to get usable errors out (and avoid need to step dbg issues)
        * 10:19 AM 8/19/2024 updated w-h to use full export-clixml, where was referring to custom local alias
        * 4:12 PM 7/12/2024 fixed bad path in recovery copy for following too; missing file bug/recoverable down in 'Move/Flatten Resource etc files into root of temp Build dir...', 
        added broad recovery instructions (reinstall from repo, latest vers, buffer in the .psd1/.psm1 from repo copy, rerun)
        * 8:52 AM 12/12/2023 fixed typo trailing log echo #2771 (and added ref to both currlog & perm copy stored at uwps\logs)
        * 3:14 PM 12/11/2023 added expl for reset-ModuleBuildFail.ps1 cleanup pass ; 
            vazure bombed on build, missing LICENSE.TXT, so used leaf 
            dest spec on the re-copy - actually fix may be to premptively run 
            reset-ModuleBuildFail.ps1 ahead of any rebuild - could be the issue was 
            deadwood inapprop in the sc\modname\modname\ dir;   (prior was all built into 
            vdev v1.5.42, didn't error out, but didn't fire the new re-copy-item code 
            either) ; ammended fail of test, to re-copy missing file into 
            cumods\modname\modname, prior to pbmo run (testing w vdev rebuild) ;confirmed, 
            vnet finally built, with the pass pre-conffirming the CUMods\modname\modname 
            contained all files cited in the psd1.filelist (not sure what diff that makes, 
            it didn't actually copy them if missing...);  
        * 3:40 PM 12/8/2023 WIP: dbging #2017, just fixed typo, intent is to loop out and preverif the modname\modname has the files in the cu mods modname.psd1, before the next step 
        test-modulemanifest, and the followon pbmod, that has been bombing for verb-network.
            - added code pre pbmod, & test-mani, to pull the cached CUMods\modname\modname\psd1, loop the scModNameModname psd1.filelist, and verify that the CUMods copy has each 
        filelist entry present.
        * 4:34 PM 12/6/2023
            ADD:
            - finding $Modroot blank, so coercing it from the inbound $sModDirPath
            - $rgxModExtIncl: added trailing '$' to test to end of ext, as wo it was matching on extensions that *start* with the above, even if named .xml_TMP.
            - $iSkipAutomaticTagsThreshold = 2000 ; # number of chars of comma-quote-delim'd public function names, as a string array, to establish a threshold to use SkipAutomaticTags 
        with publish-module (NugGet bug workaround)
                # issue is: powershellget automatic tags all exported function and hangs when u go over 4000 characters can be avoided by SkipAutomaticTags on publish-module
            - code to guestimate function-array as tags, and dyn add -SkipAutomaticTags  to publish-module, to suppress bug above, for mods with large # of functions.
            - echo Discovered mod-copy files
            - capture the mkdir output (pipeline spam)
            - as Publish-Module returns a garbage string-array -errorvariable, even when it passes and doesn't trigger CATCH, I just flipped the post errorvariable test to echo it's 
        content, with no action. Insuff info returned to have the result acted upon. (garbage)
            added CBH demo of code to review repo's below c:\sc\verb-* root, for errantly includable files (you'd want to remove to avoid publishing).
        * 4:44 PM 12/5/2023 psd1.Filelist: select uniques, showing mults in the resulting array in psd1.filelist; added -errorvariable to all ipmo's w validation; added -errvari & 
        validation to the Publish-module as well (blows through, wo killing build otherwise)
        * 3:20 PM 12/4/2023 
            removed all [#]requires stmts (main, and populate-ModulePublishingDirectory(), had runasadmin, blocking install as UID)
            Prior:
            - expanded CBH, added dir structure
            - add -errorvariable & analysis to ipmo post-build test
            - genericize strings
            - prepop missing modname\modname dir
            - add errorvari to ipmo & ismo 
            - * rplc !$whatif -> -not($whatif)
            Prior:         Last pass on curr fixes, with inline debugging fixes, ran to completion, first time since October 12 2023. 
            It now properly supports psd1 manifest FileList and (Docs|Licenses|Resource) dir build-in components through that setting.
            cleanup, typo fix, splice over final updates:
            - add: $rgxInclOutLicFileName = '^LICENSE' ; # id's local extensionless vdev\vdev lic files that *should* remain
            - flip ww to wl on non-impacting obsolete test
            - update bannedfiles logic to pass/permit non-extension LICENSE files in modname\modname build/output dir
            - add verbose output to the file cleanup removals, to record what went when
            - NOPE:block rem newly redundant flatten resources to modname\modname code (already complete further up the function) (necessary to ensure populated, when no preexisting 
        dir)
        * 5:12 PM 12/1/2023: major fixes, tracked down source of issues: you need to 
            build vdev\vdev as intact _flat_ files complete mludle; then COPY IT to the 
            CU\Docs\Modules\verb-dev\verb-dev, and test-manifest the result. From there if 
            it's fully purged all CU and other installs of the tmod, publish-module will only find the flat file complete (even psd1.filelist array content is resolvable if they're in 
        the vdev\vdev\ root, and the CU dupe). 
            d Reset-*(), and added populate-*(), handling the purge out of all res\lic\docs content from vdev\vdev, and then copying back fresh source copes of same from the 
        res\lic\docs storage dirs.
            ing [fingerscrossed] with the new wacky psd1.FileList support (which though it "isn't used" by modules per MS, fails hard on test-modulemanifest passes, if the cited files 
        aren't in same dir as you .psd1/psm1.
        * 4:19 PM 11/29/2023 still debugging through, works all the way to the publish- command, and dies, can't resolve the FileList entries against the temp build dir... those errors 
        ccause pkg repo pub to fail, and the subsequent install-module can't find the missing unpub'd -requiredversion
        * 9:59 AM 11/28/2023 add: test-ModuleManifest error capture and analysis, and abort on errors (stock test just returns the parsed xml content, even if errors thrown)
        * 11:03 AM 10/13/2023:  expanded gci's;  code to  buffer to verb-mod\verb-mod on the source as well as the temp build loc (gets it through prebuild test-modulemanifest; 
        verb-mod\verb-mod needs to be complete self-contained copy, just like final installed); also needed to pre-remove any conflicts on the move & copy's.
        # 2:59 PM 10/12/2023 add:$rgxTargExcl, code to exclude verb-mod\verb-mod from flatten, and code to copy-flatten source verb-mod dir to it's verb-mod\verb-mod (which must be a 
        fully fleshed working copy to pass initial test-modulemanifest())
        add: block to buffer res/lics to verb-mod\verb-mod - initial test-modulemanifest against existing psd1 won't pass if they're not there in source as well as temp build mod loc; 
        cleaned out old block comment'd regions ; updated cached copy of get-foldertmpty, to latest; subst update to accomodate included non-psm1/psd1 
        resource files (in new Resource subdir); *12:29 PM 10/12/2023 add: 
        get-folderempty(), and code to loop out and remove empty folders in the module 
        tree; code to flatten move resources to the verb-MOD\verb-MOD root from 
        Resource & Licenses etc (won't pass test-modulemanifest or build if can't be 
        validated in root). ; add: moved $rgxModExtIncl out to a param, to permit on 
        the fly tweaking/override; moved swath of constants to top/central loc; add: 
        $rgxSrcFilesPostExcl (rgx to exclude exported temp breakpoint files from 
        inclusion in module build); $rgxPsd1FileListDirs = 
        "\\(Docs|Licenses|Resource)\\" ;  # dirs of files to be included in the 
        manifest FileList key     $rgxPsd1FileListExcl = 
        "\\(\.vscode|ScriptAnalyzer-Results-|logs\\)|-LOG-BATCH-EXEC-" ; # file filter 
        to exclude from mani FilList key     $rgxLicFileFilter = 
        '\\(Resource|Licenses)\\' ; # exempt extensionless license files from removal 
        in temp profile copy     # # post filter excludes regex, dir names in fullname 
        path that should never be included in build, logs, and temp versions of 
        .ps[md]1 files.     $rgxSrcFilesPostExcl = 
        "\\(Package|Tests|logs)\\|(\.ps[dm]1_(\d+-\d+[AP]M|TMP)|-LOG-BATCH-EXEC-\d+-\d+[AP]M-log\.txt|\\(fingerprint|Psd1filelist))$" 
        ;      # rgx to exclude exported temp breakpoint files from inclusion in module 
        build     $rgxPsd1BPExcl = "\\(Public|Internal|Private)\\.*-ps1-BP\.xml$" ;     
         $MergeBuildExcl = "\\(Public|Internal|External|Private)\\.*.ps1$" ;  expand 
        $rgxIncludeDirs to cover External & Private variant names as well - this is 
        used solely to exclude signing of component files that will be signed as a 
        monolithic .psm1 ;  add: code to manully calc & update the .psd1 FileList 
        key/value;  
        # 3:03 PM 6/22/2023 #361: splice in better error-handling fail through code from psb-psparamt ($budrv covers for empty referrals)
        * 1:46 PM 3/22/2023 #1212:Publish-Module throws error if repo.SourceLocation isn't testable (when vpn is down), test and throw prescriptive error (otherwise is obtuse); 
        expanded catch's they were coming up blank
        * 11:20 AM 12/12/2022 completely purged rem'd require stmts, confusing, when they echo in build..., ,verb-IO, verb-logging, verb-Mods, verb-Text
        * 3:10 PM 9/7/2022 ren & alias orig name (verb compliance): process-NewModule -> update-NewModule
        * 11:55 AM 6/2/2022 finally got through full build on verb-io; typo: pltCMPV -> pltCMBS; 
        * 3:42 PM 6/1/2022 add: -RequiredVersion picked up from psd1 post step ; defer into confirm-ModuleBuildSync ; echo update-NewModule splt before running; typo in $psd1vers ; 
        cleaned old rems; 
        * 9:00 AM 5/31/2022 recoding for version enforcement (seeing final un-incremented): added -Version; cbh example tweaks ; subbed all Exit->Break; subbed write-warnings to 7pswlw 
        ; twinned $psd1UpdatedVers into the nobuildversion section.
        * 4:34 PM 5/27/2022: update all Set-ContentFixEncoding & Add-ContentFixEncoding -values to pre |out-string to collapse arrays into single writes
        * 2:38 PM 5/24/2022: Time to resave update-NewModuleHybrid.ps1 => C:\sc\verb-dev\Public\update-NewModule.ps1
        * 2:54 PM 5/23/2022 add: verbose to pltUMD splat for update-metadata (psd1 enforce curr modvers); added missing testscript-targeting remove-UnneededFileVariants @pltRGens ;  
            got through full dbg/publish/install pass on vio merged, wo issues. Appears functional. 
        * 4:01 PM 5/20/2022 WIP, left off, got through the psdUpdatedVers reset - works, just before the uninstall-moduleforce(), need to complete debugging on that balance of 
        material. 
        still debugging: add: buffer and post build compare/restore the $psd1UpdatedVers, to the psd1Version (fix odd bug that's causing rebuild to have the pre-update moduleversion); 
            $rgxOldFingerprint (for identifying backup-fileTDO fingerprint files); revert|backup-file -> restore|backup-fileTDO; add restore-fileTDO fingerprint, and psm1/psd1 (using 
        the new func)
        * 4:00 PM 5/13/2022 ren merge-module() refs -> ConvertTo-ModuleDynamicTDO() ; ren unmerge-module() refs -> ConvertTo-ModuleDynamicTDO
        * 4:10 PM 5/12/2022 got through a full non -Dyn pass, to publish and ipmo -for. Need to dbg unmerged-module.psm1 interaction yet, but this *looks* like it could be ready to be 
        the update-NewModule().
        * 8:45 AM 5/10/2022 attempt to merge over dotsource updates and logic, create a single hosting both flows
        * 2:59 PM 5/9/2022 back-reved update-NewModuleHybridDotsourced updates in
        * 8:47 PM 10/16/2021 rem'd out ReqMods code, was breaking exec from home
        * 1:17 PM 10/12/2021 revised post publish code, find-module was returning an array (bombming nupkg gci), so sort on version and take highest single.
        * 3:43 PM 10/7/2021 revised .nupkg caching code to use the returned (find-module).version string to find the repo .nupkg file, for caching (works around behavior where 4-digit 
        semvars, with 4th digit(rev) 0, get only a 3-digit version string in the .nupkg file name)
        * 3:43 PM 9/27/2021 spliced in updated start-log pre-proc code ; fixed $Repo escape in update herestring block
        * 2:14 PM 9/21/2021 functionalized & added to verb-dev ; updated $FinalReport to leverage varis, simpler to port install cmds between mods; added #requires (left in loadmod 
        support against dependancy breaks); cleaned up rems
        * 11:25 AM 9/21/2021 added code to remove obsolete gens of .nupkgs & build log files (calls to new verb-io:remove-UnneededFileVariants());
        * 12:40 PM 6/2/2021 example used verb-trans, swapped in verb-logging
        * 12:07 PM 4/21/2021 expanded ss aliases
        * 10:17 AM 3/16/2021 added -ea 0 to the install BP output, suppress remove-module error when not already loaded
        * 10:35 AM 6/29/2020 added new -NoBuildInfo param, to skip reliance on BuildHelpers module (get/Set-BuildEnvironment hang when run at join-object module)
        * 1:19 PM 4/10/2020 swapped in 7psmodhybrid mods
        * 3:38 PM 4/7/2020 added Remove-Module to the trailing demo install command - pulls down the upgraded mod from the session (otherwise, old & new remain in session); added 
        AllUser demo trailing code too, less likely to misupgrade jumpbox
        * 9:21 AM 4/1/2020 added -RunTest to trigger pester test exec, also wrapped test-modulemanifest in try/catch to capture fails (a broken psd1 isn't going to work on install), 
        fail immed exits processing, also added detection of invalid test script guids and force match to psd1
        * 8:44 AM 3/17/2020 added new rebuild-module.ps1 to excludes on install/publish
        * 10:11 AM 3/16/2020 swapped verb-IO to mod code, added AllowClobber to the demo reinstall end text
        * 3:46 PM 3/15/2020 reworked module copy process - went back to original 'copy all w isolated exclusions' and dropped the attempt at -include control of final extensions. Did a 
        post-copy purge of undesired file types instead.
        * 9:59 AM 3/9/2020 fixed bug in module copy process, needed to sort dirs first, to ensure they pre-exist before files are attempted (supresses error)
        * 4:32 PM 3/7/2020 revised the module copy process to only target common module components by type (instead of all but .git & .vscode)
        * 7:05 PM 3/3/2020 added code to detect and echo psd1 guid match, updated export modules code, added buffering of proc log
        * 8:39 AM 3/2/2020 still trying to get things to smoothly fail through missing installed mod, to dev .psm1, and finally into uwes copy of the mod, to ensure the commands are 
        mounted, under any circ, working, still not happy when updating a module that the script itself is dependant on. Updated Final Report to sort other machine update sample
        * 7:31 AM 3/2/2020 spliced over Set-ModuleFunction FunctionsToExport maint code from converTo-Module.ps1
        * 4:03 PM 3/1/2020 excluded module load block from verbose output
        * 4:32 PM 2/27/2020: ammended test import-module force (hard reload curr version) & verbose output ; added trailing FinalReport with post install guidence & testing
        * 7:21 PM 2/26/2020 sorted a typo/dupe in the nupkg copy echo ; updated psm1 version code, fixd bug, replic'd it to the convert script. shifted FunctionsToExport into 
        buildhelpers mod (added #requires), added -DisableNameChecking to mod imports
        * 6:30 PM 2/25/2020 added code to update the guid from the psd1 into the pester test scrpit
        * 2:00 PM 2/24/2020 added material re: uninstall in description/example
        * 4:00 PM 2/18/2020 added new descriptive -Tag $ModuleName  spec to the start-Log call
        * 7:36 PM 1/15/2020 added code to create 'Package' subdir, and copy in post-publish .nupkg file (easier to buffer into other repos, than publish-module) had to splice in broken 
        installed module backfill for verb-dev
        * 7:58 PM 1/14/2020 converted dev-verb call into #requires Module call ; #459 flipped to using .net to pull the mydocs specfolder out of the OS (in case of fut redir) ; ren 
        parm (to match convertto-module.ps1): DemoRepo -> Repository, added manual removal of old version from all $env:psmodulepath entries, shifted $psd1vers code to always, and used 
        it with the install-module -requiredversion, to work around the cmds lack of auto-priority, if it finds multiples, it doesn't install latest, just throws up. (could have used 
        -minrev too and it *should* have done this, or any later). Ran full publish & validate on verb-dev (work)
        * 10:49 AM 1/13/2020 updated echos for Republish/non-republish output (enum specific steps each will cover), was throwing deep acc error on copy to local prof for md file, 
        added retry, which 2x's and fails past it. Doesn't seem mpactful, the md wasn't even one id' pop'd, just a defaupt template file
        * 7:35 AM 12/30/2019 got through a full pass to import-module on verb-dev. *appears* functional
        * 12:03 PM 12/29/2019 added else wh on pswls entries
        * 1:53 PM 12/28/2019 shifted to verb-* loads for all local functions, added pre-publish check for existing conflicting verison. Still throwing exec code in sig block
        * 12:28 PM 12/27/2019 subbed write-warning for write-error throughout
        * 1:38 PM 12/26/2019 #251 filter public|internal|classes include subdirs - don't sign them (if including/dyn-including causes 'Executable script code found in signature block.' 
        errors ; 12/26/2019 flipped #399 from Error to Info in write-log, ran a full clean pass on verb-dev. ; ADD #342 -AllowClobber, to permit install command overlap (otherwise it 
        aborts the install-module attempt), updated SID test to leverage regx
        * 9:29 AM 12/20/2019 fixed quote/dbl-quote issue in the profile copy code (was suppressing vari expansion)
        * 7:05 PM 12/19/2019 subbed in write-log support ; init, ran through Republish pass on verb-AAD
    
    -------------------------- EXAMPLE 1 --------------------------
    
    PS>processbulk-NewModule.ps1 -mod verb-text,verb-io -verbose
    
    Example using the separate processbulk-NewModule.ps1 pre-procesesor to feed an array of mods through bulk processing, uses BuildEnvironment Step-ModuleVersion to increment the psd1 
    version, and specs -merge & -RunTest processing
    
    
    
    
    -------------------------- EXAMPLE 2 --------------------------
    
    PS>processbulk-NewModule.ps1 -mod -Dynamic verb-io -verbose
    
    Example using the separate processbulk-NewModule.ps1 pre-procesesor to drive a Dyanmic include .psm1 build to feed one mod through bulk processing, uses BuildEnvironment 
    Step-ModuleVersion to increment the psd1 version, and specs -merge & -RunTest processing
    
    
    
    
    -------------------------- EXAMPLE 3 --------------------------
    
    PS>update-NewModule -ModuleName "verb-AAD" -ModDirPath "C:\sc\verb-AAD" -Repository $localPSRepo  -Merge -showdebug -whatif ;
    
    Full Merge Build/Rebuild from components & Publish/Install/Test specified module, with debug messages, and whatif pass.
    
    
    
    
    -------------------------- EXAMPLE 4 --------------------------
    
    PS>update-NewModule -ModuleName "verb-AAD" -ModDirPath "C:\sc\verb-AAD" -Repository $localPSRepo  -showdebug -whatif ;
    
    Non-Merge pass: Re-sign specified module & Publish/Install/Test specified module, with debug messages, and whatif pass.
    
    
    
    
    -------------------------- EXAMPLE 5 --------------------------
    
    PS>write-verbose "pre-remove installed module" ;
    
    PS> write-verbose "re-increment the psd1 file ModuleVersion (unique new val req'd to publish)" ; 
    PS> update-NewModule -ModuleName "verb-AAD" -ModDirPath "C:\sc\verb-AAD" -Repository $localPSRepo -Merge -Republish -showdebug -whatif ;
    Merge & Republish pass: Only Publish/Install/Test specified module, with debug messages, and whatif pass.
    
    
    
    
    -------------------------- EXAMPLE 6 --------------------------
    
    PS>write-verbose "Module, uninstall all but latest"
    
    PS> $modules = Get-Module -ListAvailable ModuleName* | Select-Object -ExpandProperty Name -Unique ;
    PS> foreach ($module in $modules) {$Latest = Get-InstalledModule $module; Get-InstalledModule $module -AllVersions | ? {$_.Version -ne $Latest.Version} | Uninstall-Module ;} ;
    Util code to uninstall all but latest version of a given module.
    
    
    
    
    -------------------------- EXAMPLE 7 --------------------------
    
    PS>$rgxModExtIncl='\.(cab|cat|cmd|config|cscfg|csdef|css|dll|dylib|gif|html|ico|jpg|js|json|map|Materialize|MaterialUI|md|pdb|php|png|ps1|ps1xml|psd1|psm1|rcs|reg|snippet|so|txt|vsc
    ode|wixproj|wxi|xaml|xml|yml|zip)$' ;
    
    PS> $rgxPsd1FileListDirs = "\\(Docs|Licenses|Resource)\\" ;
    PS> foreach($pth in (resolve-path c:\sc\verb-* )){
    PS>   write-host -fore yellow "`n===$($pth.path)" ;
    PS>   $tpth = (join-path $pth.path ($pth.path.tostring().replace('C:\sc\',''))) ;
    PS>   write-host "`$tpth:$($tpth)" ;
    PS>   if($mfiles = gci -path $tpth -recur | ?{$_.extension -match $rgxModExtIncl -AND $_.fullname -notmatch $rgxPsd1FileListDirs}) {
    PS>       write-warning "Found following potential errant includes in dir:`n$(($mfiles.fullname|out-string).trim())" ;
    PS>   } ;
    PS> } ; 
    Code for weeding a stack of repo's for inappropriate files in the heirarchy that could wind up unexpectedly published, with newly-functional psd1.FileList support (publishable 
    extensions, *not* in Resource\Docs\License subdirs that explicitly source FileList includes). Review the output, and remove any files you don't want published.
    PS> .\reset-ModuleBuildFail.ps1 -Name verb-Azure -verbose ;
    Separate uwps script that resets the local Repo c:\sc\[modulename]\[modulename\ dir, and reinstalls the most recent published vers of a given module that failed a build attempt 
    (via processbulk-newmodule.ps1 & update-NewModule()). Worth running on a build fail - it looks like some psd1.FileList publish-module errors are a product of deadwood already 
    pre-populated in the sc\modname\modname dir
    
    
    
    
    
RELATED LINKS
    https://github.com/tostka/verb-dev
    
    Requires -Modules BuildHelpers



