
NAME
    Convert-HelpToHtmlFile
    
SYNOPSIS
    Convert-HelpToHtmlFile.ps1 - Create a HTML help file for a PowerShell module.
    
    
SYNTAX
    Convert-HelpToHtmlFile [-CodeObject] <String> [-Destination] <String> [-SkipDependencyCheck] [-Script] [-MarkdownHelp] [-NoPreview] [<CommonParameters>]
    
    
DESCRIPTION
    Convert-HelpToHtmlFile.ps1 - Create a HTML help file for a PowerShell module or script.
    
    - For modules, generates a full HTML help file for all commands in the module, with a nav menu at the top.
    - For scripts it generates same for the script's CBH content. 
    
    Updated variant of Øyvind Kallstad's Invoke-CreateModuleHelpFile() function. 
    
    Dependancies:
    - Rendered html uses jquery, the bootstrap framework & jasny bootstrap add-on (and following .css files):
            jasny-bootstrap.min.css
            jasny-bootstrap.min.js
            jquery-1.11.1.min.js
            navmenu.css
            bootstrap.min.css
            bootstrap.min.js
    - my verb-dev:get-HelpParsed() (to parse script CBH into rough equivelent's of get-module metadata outputs, drops missing details from output if unavailable).
    

PARAMETERS
    -CodeObject <String>
        Name of module or path to script [-CodeObject myMod]
        
        Required?                    true
        Position?                    1
        Default value                
        Accept pipeline input?       false
        Accept wildcard characters?  false
        
    -Destination <String>
        Directoy into which 'genericly-named output files should be written, or the full path to a specified output file[-Destination c:\pathto\MyModuleHelp.html]
        
        Required?                    true
        Position?                    2
        Default value                
        Accept pipeline input?       false
        Accept wildcard characters?  false
        
    -SkipDependencyCheck [<SwitchParameter>]
        Skip dependency check[-SkipDependencyCheck]
        
        Required?                    false
        Position?                    named
        Default value                False
        Accept pipeline input?       false
        Accept wildcard characters?  false
        
    -Script [<SwitchParameter>]
        Switch for processing target Script files (vs Modules, overrides natural blocks on processing scripts)[-Script]
        
        Required?                    false
        Position?                    named
        Default value                False
        Accept pipeline input?       false
        Accept wildcard characters?  false
        
    -MarkdownHelp [<SwitchParameter>]
        Switch to use PlatyPS to output markdown help variants[-MarkdownHelp]
        
        Required?                    false
        Position?                    named
        Default value                False
        Accept pipeline input?       false
        Accept wildcard characters?  false
        
    -NoPreview [<SwitchParameter>]
        Switch to suppress trailing preview of html in default browser[-NoPreview]
        
        Required?                    false
        Position?                    named
        Default value                False
        Accept pipeline input?       false
        Accept wildcard characters?  false
        
    <CommonParameters>
        This cmdlet supports the common parameters: Verbose, Debug,
        ErrorAction, ErrorVariable, WarningAction, WarningVariable,
        OutBuffer, PipelineVariable, and OutVariable. For more information, see 
        about_CommonParameters (https:/go.microsoft.com/fwlink/?LinkID=113216). 
    
INPUTS
    None. Does not accepted piped input.
    
    
OUTPUTS
    System.Object.string converted file path(s) returned to pipeline
    System.Boolean
    [| get-member the output to see what .NET obj TypeName is returned, to use here]
    
    
NOTES
    
    
        Version     : 1.2.1
        Author      : Todd Kadrie
        Website     : http://www.toddomation.com
        Twitter     : @tostka / http://twitter.com/tostka
        CreatedDate : 2023-10-02
        FileName    : Convert-HelpToHtmlFile.ps1
        License     : (None Asserted)
        Copyright   : (None Asserted)
        Github      : https://github.com/tostka/verb-dev
        Tags        : Powershell, development, html, markdown, conversion
        AddedCredit : Øyvind Kallstad @okallstad
        AddedWebsite: https://communary.net/
        AddedTwitter: @okallstad / https://twitter.com/okallstad
        REVISIONS
        * 1:47 PM 10/12/2023 fix typo: #99: $(!) ; add dep chk, defer to $scriptdir, avoids need to run pwd in the module, for loc of resource incl files (which don't actually work; 
        should create a browesr left pane menu for nav, it never appears on modern browsers).
        * 9:50 AM 10/3/2023 add: -markdownhelp echos ; add:CBH expl that demos capture & recycle of output filename through convert-HtmlToMarkdown equivelent markdown .md doc. The CBH 
        -> markdown via PlattyPS New-MarkdownHelp yields decent leaf cmdlet docs, but doesn't create the same holistic module nav-menued .html doc (which can be manually created with 
        convert-htmlToMarkdown, tho the menues don't work)
        * 3:58 PM 10/2/2023 added -MarkdownHelp and simple call branching each commandlet process into plattyps to output quick markdown .md files in the parent dir of -Destination ; 
        Moving this into verb-dev, no reason it should sit in it's own repo (renaming Invoke-CreateModuleHelpFile -> Convert-HelpToHtmlFile) ; 
        ren & alias ModuleName -> CodeObject ;
        Rounded out -script/non-module support by splicing in my verb-dev:get-HelpParsed() which parses the CBH content (via get-help) and returns metadata I routinely populate in the 
        Notes CBH block.
        This provided more details to use in the resulting output html, to make it *closer* to the native module data; 
        Also updated html output - wasn't displaying key:value side by side, so I spliced in prehistoric html tables to force them into adjacency
        And finally fixed the NOTES CBH output, expanding the line return -><br> replacements to cover three different line return variant formats: Notes now comes out as a properly 
        line-returned block, similar to the CBH appearance in the source script.
        * 9:17 AM 9/29/2023 rewrote to support conversion for scripts as well; added 
        -script & -nopreview params (as it now also auto-previews in default browser);  
        ould be to move the html building code into a function, and leave the module /v script logic external to that common process.
        expanded CBH; put into OTB & advanced function format; split trycatch into beg & proc blocks
        10/18/2014 OK's posted rev 1.1
    
    -------------------------- EXAMPLE 1 --------------------------
    
    PS>Convert-HelpToHtmlFile -CodeObject 'verb-text' -Destination 'c:\temp\verb-text_HLP.html' -verbose ;
    
    Generate Html Help file for 'verb-text' module and save it as explicit filename 'c:\temp\verb-text_HLP.html' with verbose output.
    
    
    
    
    -------------------------- EXAMPLE 2 --------------------------
    
    PS>Convert-HelpToHtmlFile -CodeObject 'c:\usr\work\ps\scripts\move-ConvertedVidFiles.ps1' -Script -destination 'c:\temp\'  -verbose ;
    
    Generate Html Help file for the 'move-ConvertedVidFiles.ps1' script and save it as with a generated default name (move-ConvertedVidFiles_HELP.html) to the 'c:\temp\' directory with 
    verbose output.
    
    
    
    
    -------------------------- EXAMPLE 3 --------------------------
    
    PS>Convert-HelpToHtmlFile -CodeObject 'verb-text' -Destination 'c:\temp\' -verbose ;
    
    Generate Html Help file for 'verb-text' module and save it as specified directory, with generated xxx_HELP.html filename, and verbose output.
    
    
    
    
    -------------------------- EXAMPLE 4 --------------------------
    
    PS>write-verbose "convert CBH for the verb-text module into html & assign the returned output path(s) to $ifile" ;
    
    PS> $ifile = Convert-HelpToHtmlFile -ModuleName 'verb-text' -destination 'c:\temp\' ; 
    PS> write-verbose "then convert the .html output files to markdown using the convert-html-ToMarkdown module/command (recycling the input file names)" ; 
    PS> $ifile | ?{$_ -match '\.html$'} | %{$ofile = $_.replace('/','\').replace('.html','.md') ; write-host "==$($ifile)->$($ofile):" ; get-content $_ -raw -force | 
    Convert-HtmlToMarkdown -UnknownTags bypass | Set-Content -path $ofile -enc utf8 -force} ; 
    Demo conversion of a module's CBH help to first html, and then the .html to markdown .md equivelent (via Brian Lalonde's seperate convert-HtmlToMarkdown binary module)
    
    
    
    
    
RELATED LINKS
    https://github.com/tostka/Invoke-CreateModuleHelpFile
    https://github.com/tostka/verb-dev
    https://github.com/gravejester/Invoke-CreateModuleHelpFile
    



