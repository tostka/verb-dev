
NAME
    Initialize-PSModuleDirectories
    
SYNOPSIS
    Initialize-PSModuleDirectories.ps1 - Initialize PS Module Directories
    
    
SYNTAX
    Initialize-PSModuleDirectories [-ModuleSourcePath] <Array> [-ModuleDestinationPath] <String> [[-DefaultModDirs] <String[]>] [-whatIf] [<CommonParameters>]
    
    
DESCRIPTION
    Initialize-PSModuleDirectories.ps1 - Initialize PS Module Directories
    DEFAULT - DIRS CREATION - git doesn't reproduce empty dirs, create if empty (avoids errors later)
    exempt the .git & .vscode dirs, we don't publish those to modules dir
    

PARAMETERS
    -ModuleSourcePath <Array>
        Array of directory paths containing .ps1 function files to be combined [-ModuleSourcePath c:\path-to\module\Public]
        ModuleDestinationPath
        Directory path in which the final .psm1 file should be constructed [-ModuleDestinationPath c:\path-to\module\module.psm1]
        DefaultModDirs
        Array of new module subdirectory names to be created
        
        Required?                    true
        Position?                    1
        Default value                
        Accept pipeline input?       false
        Accept wildcard characters?  false
        
    -ModuleDestinationPath <String>
        
        Required?                    true
        Position?                    2
        Default value                
        Accept pipeline input?       false
        Accept wildcard characters?  false
        
    -DefaultModDirs <String[]>
        
        Required?                    false
        Position?                    3
        Default value                @('Public','Internal','Classes','Libs','Tests','Licenses','Resource','Docs','Docs\Cab','Docs\en-US','Docs\Markdown')
        Accept pipeline input?       false
        Accept wildcard characters?  false
        
    -whatIf [<SwitchParameter>]
        Parameter to run a Test no-change pass [-Whatif switch]
        
        Required?                    false
        Position?                    named
        Default value                False
        Accept pipeline input?       false
        Accept wildcard characters?  false
        
    <CommonParameters>
        This cmdlet supports the common parameters: Verbose, Debug,
        ErrorAction, ErrorVariable, WarningAction, WarningVariable,
        OutBuffer, PipelineVariable, and OutVariable. For more information, see 
        about_CommonParameters (https:/go.microsoft.com/fwlink/?LinkID=113216). 
    
INPUTS
    
OUTPUTS
    
NOTES
    
    
        Version     : 3.4.1
        Author      : Todd Kadrie
        Website     : http://www.toddomation.com
        Twitter     : @tostka / http://twitter.com/tostka
        CreatedDate : 2022-04-26
        FileName    : Initialize-PSModuleDirectories.ps1
        License     : (None Asserted)
        Copyright   : (None Asserted)
        Github      : https://github.com/tostka/verb-dev
        Tags        : Powershell, development, Module
        AddedCredit : Jeff Hicks
        AddedWebsite: https://www.powershellgallery.com/packages/ISEScriptingGeek/3.4.1
        AddedTwitter: 
        REVISIONS
        * 12:23 PM 8/7/2024 removed erroneous [ValidateScript( {Test-Path $_})] from $DefaultModDirs param
        * 12:18 PM 10/12/2023 correct .\Resources -> Resource that's in use 
        * 11:21 AM 10/3/2023 added LICENSES & LIBS & RESOURCES to DefaultModDirs
        * 9:35 AM 5/9/2022 init, split out from merge/unmerge-module, have a single maintainable func, rather than trying to sync the variants
    
    -------------------------- EXAMPLE 1 --------------------------
    
    PS C:\>$pltInitPsMDirs=[ordered]@{
    
    ModuleSourcePath=$ModuleSourcePath ;
        ModuleDestinationPath=$ModuleDestinationPath ;
        ErrorAction="Stop" ;
        whatif=$($whatif);
    } ;
    $smsg= "Initialize-PSModuleDirectories w`n$(($pltInitPsMDirs|out-string).trim())" ;
    if ($logging) { Write-Log -LogContent $smsg -Path $logfile -useHost -Level Info }  
    else{ write-host -foregroundcolor green "$((get-date).ToString('HH:mm:ss')):$($smsg)" } ;
    TRY {
        $sRet = Initialize-PSModuleDirectories @pltInitPsMDirs ;
        if(sRet.split(';') -contains "new-item:ERROR"){
            $smsg = "Initialize-PSModuleDirectories:new-item:ERROR!"  ;
            write-warning $smsg ; 
            throw $smsg ;
        } ; 
    } CATCH {
        $PassStatus += ";ERROR";
        write-warning  "$(get-date -format 'HH:mm:ss'): Failed processing $($_.Exception.ItemName). `nError Message: $($_.Exception.Message)`nError Details: $($_)" ;
        Exit ;
    } ;
    
    
    
    
    
RELATED LINKS
    https://github.com/tostka/verb-dev



